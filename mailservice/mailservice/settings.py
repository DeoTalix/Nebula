# -*- coding: utf-8 -*-
"""
Django settings for mailservice project.

Generated by 'django-admin startproject' using Django 1.11.29.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from __future__ import absolute_import
import os
import sys
import socket

from django.core.management.utils import get_random_secret_key
from celery.schedules import crontab
from dotenv import load_dotenv

from app.utils import get_ngrok_hostname




# Check python version
assert sys.version.startswith("2.7"), "Unsupported version of python. "\
                                      "Expected python 2.7"
# Load environmental variables
assert load_dotenv(), "Failed to load .env file"


# Check required environmental variables
ENV_KEYS = "EMAIL_HOST EMAIL_PORT EMAIL_HOST_USER EMAIL_HOST_PASSWORD"
for key in ENV_KEYS.split():
    assert os.getenv(key) is not None, "%s is not found in .env!" % key

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

try:
    CURRENT_HOST = get_ngrok_hostname()
    CURRENT_PORT = ""
except Exception:
    pass
CURRENT_HOST = os.getenv("CURRENT_HOST", "127.0.0.1")
CURRENT_PORT = os.getenv("CURRENT_PORT", ":8000")

print("Using %s%s as the current host." % (CURRENT_HOST, CURRENT_PORT))

ALLOWED_HOSTS = (
    "0.0.0.0",
    "127.0.0.1",
    "localhost",
    CURRENT_HOST,
)

# CSRF
CSRF_TRUSTED_ORIGINS = [
    "http://%s%s"  % (CURRENT_HOST, CURRENT_PORT),
    "https://%s%s" % (CURRENT_HOST, CURRENT_PORT),
    "http://0.0.0.0:8000",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "app",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mailservice.urls'

TEMPLATES_APP_PATH  = os.path.join(BASE_DIR, "app", "templates")
# Must be one level of nesting max
TEMPLATES_MAIL_PATH = os.path.join(TEMPLATES_APP_PATH, "mail_templates")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATES_APP_PATH,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mailservice.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = "staticfiles"


# Email
EMAIL_BACKEND       = "django.core.mail.backends.smtp.EmailBackend"
                      # Set email host as IPv4 
                      # Raises error if EMAIL_HOST is not defined
EMAIL_HOST          = os.getenv('EMAIL_HOST') \
                        and socket.gethostbyname(os.getenv('EMAIL_HOST'))
EMAIL_PORT          = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER     = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL       = True
EMAIL_USE_TLS       = not EMAIL_USE_SSL
SERVER_EMAIL        = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL  = EMAIL_HOST_USER


# Celery
# Set broker url using defaults if none of the CELERY env variables are specified
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", 
    "amqp://%(user)s:%(pssw)s@%(host)s%(port)s/%(vhost)s" % dict(
        host  = os.getenv("CELERY_BROKER_HOST", "127.0.0.1"),
        port  = os.getenv("CELERY_BROKER_PORT", ":5672"),
        user  = os.getenv("CELERY_USER",        "myuser"),
        pssw  = os.getenv("CELERY_PASSWORD",    "mypassword"),
        vhost = os.getenv("CELERY_VHOST",       "myvhost")
    )
)
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_BEAT_SCHEDULE = {
    'track-messages-every-day': {
        'task': 'app.tasks.broadcast_message_beat',
        'schedule': crontab(minute="0", hour="9-18")
    },
}


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'django_file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django-debug.log',
            "formatter": "verbose",
        },
        "django_file_error" : {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/django-error.log',
            "formatter": "verbose",
        },
        'celery_file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/celery-debug.log',
            "formatter": "verbose",
        },
        "celery_file_error" : {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/celery-error.log',
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO",
            'class': 'logging.StreamHandler',
            "formatter": "verbose",
        },
    },
    'loggers': {
        'django': {
            'handlers': [
                'django_file_debug', 
                "django_file_error", 
                "console"
            ],
            'level': "DEBUG",
            'propagate': False,
        },
        'celery': {
            'handlers': [
                'celery_file_debug',
                "celery_file_error",
                "console",
            ],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Mailservice app
# Max time for resolving email transaction statuses
BROADCAST_MAX_TIMEOUT = 5 # minutes
